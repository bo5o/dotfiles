# vim: ft=cfg:
[MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=CVS

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=1

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# Specify a configuration file.
#rcfile=

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable=all
# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable=
    ### ASYNC ###
    # not-async-context-manager,             # E1701
    # yield-inside-async-function,           # E1700

    ### BASIC ###
    # blacklisted-name,                      # C0102
    # invalid-name,                          # C0103
    # empty-docstring,                       # C0112
    # missing-module-docstring,              # C0114
    # missing-class-docstring,               # C0115
    # missing-function-docstring,            # C0116
    # singleton-comparison,                  # C0121
    # misplaced-comparison-constant,         # C0122
    # unidiomatic-typecheck,                 # C0123
    # init-is-generator,                     # E0100
    # return-in-init,                        # E0101
    # function-redefined,                    # E0102
    # not-in-loop,                           # E0103
    # return-outside-function,               # E0104
    # yield-outside-function,                # E0105
    # return-arg-in-generator,               # E0106
    # nonexistent-operator,                  # E0107
    # duplicate-argument-name,               # E0108
    # abstract-class-instantiated,           # E0110
    # bad-reversed-sequence,                 # E0111
    # too-many-star-expressions,             # E0112
    # invalid-star-assignment-target,        # E0113
    # star-needs-assignment-target,          # E0114
    # nonlocal-and-global,                   # E0115
    # continue-in-finally,                   # E0116
    # nonlocal-without-binding,              # E0117
    # used-prior-global-declaration,         # E0118
    # misplaced-format-function,             # E0119
    # literal-comparison,                    # R0123
    # comparison-with-itself,                # R0124
    # unreachable,                           # W0101
    # dangerous-default-value,               # W0102
    # pointless-statement,                   # W0104
    # pointless-string-statement,            # W0105
    # expression-not-assigned,               # W0106
    # unnecessary-pass,                      # W0107
    # unnecessary-lambda,                    # W0108
    # duplicate-key,                         # W0109
    # assign-to-new-keyword,                 # W0111
    # useless-else-on-loop,                  # W0120
    # exec-used,                             # W0122
    # eval-used,                             # W0123
    # confusing-with-statement,              # W0124
    # using-constant-test,                   # W0125
    # missing-parentheses-for-call-in-test,  # W0126
    # self-assigning-variable,               # W0127
    # redeclared-assigned-name,              # W0128
    # comparison-with-callable,              # W0143
    # lost-exception,                        # W0150
    # assert-on-tuple,                       # W0199

    ### CLASSES ###
    # bad-classmethod-argument,              # C0202
    # bad-mcs-method-argument,               # C0203
    # bad-mcs-classmethod-argument,          # C0204
    # single-string-used-for-slots,          # C0205
    # method-hidden,                         # E0202
    # access-member-before-definition,       # E0203
    # no-method-argument,                    # E0211
    # no-self-argument,                      # E0213
    # invalid-slots-object,                  # E0236
    # assigning-non-slot,                    # E0237
    # invalid-slots,                         # E0238
    # inherit-non-class,                     # E0239
    # inconsistent-mro,                      # E0240
    # duplicate-bases,                       # E0241
    # class-variable-slots-conflict,         # E0242
    # non-iterator-returned,                 # E0301
    # unexpected-special-method-signature,   # E0302
    # invalid-length-returned,               # E0303
    # method-check-failed,                   # F0202
    # no-self-use,                           # R0201
    # no-classmethod-decorator,              # R0202
    # no-staticmethod-decorator,             # R0203
    # useless-object-inheritance,            # R0205
    # property-with-parameters,              # R0206
    # attribute-defined-outside-init,        # W0201
    # bad-staticmethod-argument,             # W0211
    # protected-access,                      # W0212
    # arguments-differ,                      # W0221
    # signature-differs,                     # W0222
    # abstract-method,                       # W0223
    # super-init-not-called,                 # W0231
    # no-init,                               # W0232
    # non-parent-init-called,                # W0233
    # useless-super-delegation,              # W0235
    # invalid-overridden-method,             # W0236

    ### DESIGN ###
    # too-many-ancestors                     # R0901
    # too-many-instance-attributes           # R0902
    # too-few-public-methods                 # R0903
    # too-many-public-methods                # R0904
    # too-many-return-statements             # R0911
    # too-many-branches                      # R0912
    # too-many-arguments                     # R0913
    # too-many-locals                        # R0914
    # too-many-statements                    # R0915
    # too-many-boolean-expressions           # R0916

    ### EXCEPTIONS ###
    # bad-except-order,                      # E0701
    # raising-bad-type,                      # E0702
    # bad-exception-context,                 # E0703
    # misplaced-bare-raise,                  # E0704
    # raising-non-exception,                 # E0710
    # notimplemented-raised,                 # E0711
    # catching-non-exception,                # E0712
    # bare-except,                           # W0702
    # broad-except,                          # W0703
    # duplicate-except,                      # W0705
    # try-except-raise,                      # W0706
    # binary-op-exception,                   # W0711
    # raising-format-tuple,                  # W0715
    # wrong-exception-operation,             # W0716

    ### METRICS ###
    # metrics,

    ### MISCELLANEOUS ###
    # use-symbolic-message-instead           # I0023
    # fixme                                  # W0511

    ### NEWSTYLE ###
    # bad-super-call,                        # E1003

    ### PYTHON3 ###
    # print-statement,                       # E1601
    # parameter-unpacking,                   # E1602
    # unpacking-in-except,                   # E1603
    # old-raise-syntax,                      # E1604
    # backtick,                              # E1605
    # long-suffix,                           # E1606
    # old-ne-operator,                       # E1607
    # old-octal-literal,                     # E1608
    # import-star-module-level,              # E1609
    # non-ascii-bytes-literal,               # E1610
    # apply-builtin,                         # W1601
    # basestring-builtin,                    # W1602
    # buffer-builtin,                        # W1603
    # cmp-builtin,                           # W1604
    # coerce-builtin,                        # W1605
    # execfile-builtin,                      # W1606
    # file-builtin,                          # W1607
    # long-builtin,                          # W1608
    # raw_input-builtin,                     # W1609
    # reduce-builtin,                        # W1610
    # standarderror-builtin,                 # W1611
    # unicode-builtin,                       # W1612
    # xrange-builtin,                        # W1613
    # coerce-method,                         # W1614
    # delslice-method,                       # W1615
    # getslice-method,                       # W1616
    # setslice-method,                       # W1617
    # no-absolute-import,                    # W1618
    # old-division,                          # W1619
    # dict-iter-method,                      # W1620
    # dict-view-method,                      # W1621
    # next-method-called,                    # W1622
    # metaclass-assignment,                  # W1623
    # indexing-exception,                    # W1624
    # raising-string,                        # W1625
    # reload-builtin,                        # W1626
    # oct-method,                            # W1627
    # hex-method,                            # W1628
    # nonzero-method,                        # W1629
    # cmp-method,                            # W1630
    # input-builtin,                         # W1632
    # round-builtin,                         # W1633
    # intern-builtin,                        # W1634
    # unichr-builtin,                        # W1635
    # map-builtin-not-iterating,             # W1636
    # zip-builtin-not-iterating,             # W1637
    # range-builtin-not-iterating,           # W1638
    # filter-builtin-not-iterating,          # W1639
    # using-cmp-argument,                    # W1640
    # eq-without-hash,                       # W1641
    # div-method,                            # W1642
    # idiv-method,                           # W1643
    # rdiv-method,                           # W1644
    # exception-message-attribute,           # W1645
    # invalid-str-codec,                     # W1646
    # sys-max-int,                           # W1647
    # bad-python3-import,                    # W1648
    # deprecated-string-function,            # W1649
    # deprecated-str-translate-call,         # W1650
    # deprecated-itertools-function,         # W1651
    # deprecated-types-field,                # W1652
    # next-method-defined,                   # W1653
    # dict-items-not-iterating,              # W1654
    # dict-keys-not-iterating,               # W1655
    # dict-values-not-iterating,             # W1656
    # deprecated-operator-function,          # W1657
    # deprecated-urllib-function,            # W1658
    # xreadlines-attribute,                  # W1659
    # deprecated-sys-function,               # W1660
    # exception-escape,                      # W1661
    # comprehension-escape,                  # W1662

    ### REFACTORING ###
    # unneeded-not,                          # C0113
    # consider-using-enumerate,              # C0200
    # consider-iterating-dictionary,         # C0201
    # len-as-condition,                      # C1801
    # consider-merging-isinstance,           # R1701
    # too-many-nested-blocks,                # R1702
    # simplifiable-if-statement,             # R1703
    # redefined-argument-from-local,         # R1704
    # no-else-return,                        # R1705
    # consider-using-ternary,                # R1706
    # trailing-comma-tuple,                  # R1707
    # stop-iteration-return,                 # R1708
    # simplify-boolean-expression,           # R1709
    # inconsistent-return-statements,        # R1710
    # useless-return,                        # R1711
    # consider-swap-variables,               # R1712
    # consider-using-join,                   # R1713
    # consider-using-in,                     # R1714
    # consider-using-get,                    # R1715
    # chained-comparison,                    # R1716
    # consider-using-dict-comprehension,     # R1717
    # consider-using-set-comprehension,      # R1718
    # simplifiable-if-expression,            # R1719
    # no-else-raise,                         # R1720
    # unnecessary-comprehension,             # R1721
    # consider-using-sys-exit,               # R1722
    # no-else-break,                         # R1723
    # no-else-continue,                      # R1724

    ### SIMILARITIES ###
    # duplicate-code,                        # R0801

    ### SPELLING ###
    # wrong-spelling-in-comment,             # C0401
    # wrong-spelling-in-docstring,           # C0402
    # invalid-characters-in-docstring,       # C0403

    ### STDLIB ###
    # invalid-envvar-value,                  # E1507
    # bad-open-mode,                         # W1501
    # boolean-datetime,                      # W1502
    # redundant-unittest-assert,             # W1503
    # deprecated-method,                     # W1505
    # bad-thread-instantiation,              # W1506
    # shallow-copy-environ,                  # W1507
    # invalid-envvar-default,                # W1508
    # subprocess-popen-preexec-fn,           # W1509
    # subprocess-run-check,                  # W1510

    ### STRING ###
    # bad-format-character,                  # E1300
    # truncated-format-string,               # E1301
    # mixed-format-string,                   # E1302
    # format-needs-mapping,                  # E1303
    # missing-format-string-key,             # E1304
    # too-many-format-args,                  # E1305
    # too-few-format-args,                   # E1306
    # bad-string-format-type,                # E1307
    # bad-str-strip-call,                    # E1310
    # bad-format-string-key,                 # W1300
    # unused-format-string-key,              # W1301
    # bad-format-string,                     # W1302
    # missing-format-argument-key,           # W1303
    # unused-format-string-argument,         # W1304
    # format-combined-specification,         # W1305
    # missing-format-attribute,              # W1306
    # invalid-format-index,                  # W1307
    # duplicate-string-formatting-argument,  # W1308
    # anomalous-backslash-in-string,         # W1401
    # anomalous-unicode-escape-in-string,    # W1402
    # implicit-str-concat-in-sequence,       # W1403

    ### VARIABLES ###
    # used-before-assignment,                # E0601
    # undefined-variable,                    # E0602
    # undefined-all-variable,                # E0603
    # invalid-all-object,                    # E0604
    # no-name-in-module,                     # E0611
    # unpacking-non-sequence,                # E0633
    # global-variable-undefined,             # W0601
    # global-variable-not-assigned,          # W0602
    # global-statement,                      # W0603
    # global-at-module-level,                # W0604
    # unused-import,                         # W0611
    # unused-variable,                       # W0612
    # unused-argument,                       # W0613
    # unused-wildcard-import,                # W0614
    # redefined-outer-name,                  # W0621
    # redefined-builtin,                     # W0622
    # redefine-in-handler,                   # W0623
    # undefined-loop-variable,               # W0631
    # unbalanced-tuple-unpacking,            # W0632
    # cell-var-from-loop,                    # W0640
    # possibly-unused-variable,              # W0641
    # self-cls-assignment,                   # W0642


[REPORTS]

# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'error', 'warning', 'refactor', and 'convention'
# which contain the number of messages in each category, as well as 'statement'
# which is the total number of statements analyzed. This score is used by the
# global evaluation report (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
#msg-template=

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

# Activate the evaluation score.
score=yes


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions=sys.exit


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,
          _cb

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io


[SIMILARITIES]

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no

# Minimum lines number of a similarity.
min-similarity-lines=4


[TYPECHECK]

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis). It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1

# List of decorators that change the signature of a decorated function.
signature-mutators=


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=100

# Maximum number of lines in a module.
max-module-lines=1000

# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check=trailing-comma,
               dict-separator

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Regular expression matching correct argument names. Overrides argument-
# naming-style.
#argument-rgx=

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Regular expression matching correct attribute names. Overrides attr-naming-
# style.
#attr-rgx=

# Bad variable names which should always be refused, separated by a comma.
bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style.
#class-attribute-rgx=

# Naming style matching correct class names.
class-naming-style=PascalCase

# Regular expression matching correct class names. Overrides class-naming-
# style.
#class-rgx=

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Regular expression matching correct constant names. Overrides const-naming-
# style.
#const-rgx=

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names.
function-naming-style=snake_case

# Regular expression matching correct function names. Overrides function-
# naming-style.
#function-rgx=

# Good variable names which should always be accepted, separated by a comma.
good-names=i,
           j,
           k,
           ex,
           Run,
           _

# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

# Naming style matching correct inline iteration names.
inlinevar-naming-style=any

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style.
#inlinevar-rgx=

# Naming style matching correct method names.
method-naming-style=snake_case

# Regular expression matching correct method names. Overrides method-naming-
# style.
#method-rgx=

# Naming style matching correct module names.
module-naming-style=snake_case

# Regular expression matching correct module names. Overrides module-naming-
# style.
#module-rgx=

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes=abc.abstractproperty

# Naming style matching correct variable names.
variable-naming-style=snake_case

# Regular expression matching correct variable names. Overrides variable-
# naming-style.
#variable-rgx=


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      XXX,
      TODO


[LOGGING]

# Format style used to check logging format string. `old` means using %
# formatting, `new` is for `{}` formatting,and `fstr` is for f-strings.
logging-format-style=old

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules=logging


[SPELLING]

# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# Spelling dictionary name. Available dictionaries: none. To make it work,
# install the python-enchant package.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains the private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words=no


[STRING]

# This flag controls whether the implicit-str-concat-in-sequence should
# generate a warning on implicit string concatenation in sequences defined over
# several lines.
check-str-concat-over-line-jumps=no


[DESIGN]

# Maximum number of arguments for function / method.
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=5

# Maximum number of branch for function / method body.
max-branches=12

# Maximum number of locals for function / method body.
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body.
max-returns=6

# Maximum number of statements in function / method body.
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,
                      __new__,
                      setUp,
                      __post_init__

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=cls


[IMPORTS]

# List of modules that can be imported at any level, not just the top level
# one.
allow-any-import-level=

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules=optparse,tkinter.tix

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled).
ext-import-graph=

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled).
import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled).
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Couples of modules and preferred modules, separated by a comma.
preferred-modules=


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "BaseException, Exception".
overgeneral-exceptions=BaseException,
                       Exception
